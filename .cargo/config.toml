
[target.'cfg(target_arch = "avr")']
runner = "qemu-system-avr -nographic -machine uno -bios target/avr-atmega328p/debug/examples/usart.elf  -serial tcp::5678,server=on,wait=on"

[target.'cfg(target_arch = "arm")']
runner = "qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -kernel target/thumbv7m-none-eabi/debug/examples/usart -serial tcp::5678,server=on,wait=on"

[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# uncomment ONE of these three option to make `cargo run` start a GDB session
# which option to pick depends on your system
# runner = "arm-none-eabi-gdb -q -x openocd.gdb"
# runner = "gdb-multiarch -q -x openocd.gdb"
# runner = "gdb -q -x openocd.gdb"

rustflags = [
  # Previously, the linker arguments --nmagic and -Tlink.x were set here.
  # They are now set by build.rs instead. The linker argument can still
  # only be set here, if a custom linker is needed.

  # By default, the LLD linker is used, which is shipped with the Rust
  # toolchain. If you run into problems with LLD, you can switch to the
  # GNU linker by uncommenting this line:
  # "-C", "linker=arm-none-eabi-ld",

  # If you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by uncommenting the three lines below:
  # "-C", "linker=arm-none-eabi-gcc",
  # "-C", "link-arg=-Wl,-Tlink.x",
  # "-C", "link-arg=-nostartfiles",
]

[build]
target = "avr-atmega328p.json"

# Experimental Cargo features configuration
[unstable]
build-std = ["core"] # Compile Rust Core from source and do not use standard library